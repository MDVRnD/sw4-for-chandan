---
date: last-modified
title: SW4 for Chandan
subtitle: Kindly do it
author:
  name: Sean R. Ford
  orcid: 0000-0002-0376-5792
  email: sean@llnl.gov
  affiliation: Lawrence Livermore National Laboratory
# abstract: |
    # Can you run MZZ, MXX, MYY seismograms for a layered medium in your SW4 and send me the output with the model? Kindly do it.
# bibliography: sw4-for-chandan.bib
number-sections: true
format:
  html:
    code-fold: true
    default-image-extension: png
  pdf:
    echo: false
    default-image-extension: pdf
    fig-pos: 'htbp'
    keep-tex: false
execute:
  cache: true
  freeze: true # auto
# jupyter: python3  # default
---

# Introduction

Chandan asked, "Can you run MZZ, MXX, MYY seismograms for a layered medium in your SW4 and send me the output with the model?"

We obtained [SW4](https://computing.llnl.gov/projects/serpentine-wave-propagation) 
[v3.0](https://github.com/geodynamics/sw4/releases/tag/v3.0)
from [GitHub](https://github.com/geodynamics/sw4) 
and compiled on macos with [MPICH](https://www.mpich.org) 
using the following `make.inc` file:
```
proj = yes
# homebrew version of proj is fine
SW4ROOT = /opt/homebrew
fftw = yes
# homebrew version uses openmpi so installed fftw for mpich
FFTWHOME = /Users/ford17/Applications/fftw-3.3.10
FC = mpif90
CXX = mpicxx
# need Accelerate for blas on macos
EXTRA_LINK_FLAGS = -framework Accelerate -L/opt/homebrew/lib/gcc/current -lgfortran
```


# Method

The requirements are:

- Station at (x,y,z) = (60, 0, 0)
- Source at (x,y,z) = (10, 0, 10)
- WUS model
- PPW for 5 Hz
- Dirac (delta) source

So we create an SW4 input files for each source.
Below is the input file for `mxx.sw4in`:
```
{{< include SW4/mxx.sw4in >}}
```

Note that we could have used refinement at the lowest layer for a more efficient calculation.

And to calculate the results we could use the command:
```
> mpirun -np 16 sw4 mxx.sw4in
```

In practice we used many more processors available on ruby from [LC](https://hpc.llnl.gov) 
with a slurm script, `runruby.sw4run`:
```
{{< include SW4/runruby.sw4run >}}
```

And then we execute the script with:
```
> sbatch runruby.sw4run
```

Our goal for an accurate calculation is to have a minimum points per wavelength (PPW) of between 6 and 10.
The PPW is related to the smallest wave velocity $v$ [m/s] divided by the grid spacing $h$ [m] divided by the maximum frequency represented $f$ [1/s]. For the grid used here ($v = 2008.9$ m/s, $h = 50$ m) the points per wavelength for a 5 Hz maximum frequency is:

$$
\text{PPW} = v / h / f = 2008.9 / 50 / 5 \approxeq 8 
$$


# Results

The shear wave velocity model is shown in @fig-model.

```{python}
#| eval: false
%%script bash

visit -cli -nowin -quiet << FIN &> /dev/null
#
OpenDatabase("/Users/ford17/Development/sw4-for-chandan/SW4/mxx.dir/image.cycle=0001.y=10000.s.sw4img")
AddPlot("Pseudocolor", "cs")
DrawPlots()
#
# View3DAtts = View3DAttributes()
View3DAtts = GetView3D()  # This is better since it gets the window optimized attributes
View3DAtts.viewNormal = (0, 1, 0)
View3DAtts.viewUp = (0, 0, -1)
SetView3D(View3DAtts)
#
# s.screenCapture = 0 
SaveWindowAtts = SaveWindowAttributes()
# SaveWindowAtts.outputToCurrentDirectory = 0  # required
# SaveWindowAtts.outputDirectory = "/Users/Ford17/Development/sw4-for-chandan/images"
SaveWindowAtts.outputToCurrentDirectory = 1
SaveWindowAtts.fileName = "fig-model"
SaveWindowAtts.family = 0  # do not append number
SaveWindowAtts.format = SaveWindowAtts.POSTSCRIPT  # BMP, JPEG, PNG, POSTSCRIPT, PPM, RGB, STL, TIFF, ULTRA, VTK
SaveWindowAtts.width = 2048
SaveWindowAtts.height = 2048
SetSaveWindowAttributes(SaveWindowAtts)
SaveWindow()
#
quit()
FIN

gmt psconvert fig-model.ps -A -Tfg

/bin/rm visitlog.py
```

![Shear wave velocity model plotted with [VisIt](https://visit.llnl.gov/)](fig-model){#fig-model}

Calculated velocities bandpassed between 20 s and 5 Hz are shown in @fig-results.

```{python}
#| label: fig-results
#| fig-cap: "Calculated displacements low passed at 5 Hz plotted with [ObsPy](https://www.obspy.org)."

from obspy import UTCDateTime, Stream, read

stream = Stream()
for comp in ("mxx", "myy", "mzz"):
    streamcomp = read("SW4/"+comp+".dir/rec50.?", format="SAC")
    for tr in streamcomp:
        tr.stats.station = comp
        tr.stats.starttime = UTCDateTime()
    stream += streamcomp
 
stream.filter('bandpass', freqmin=0.05, freqmax=5.00)
stream.plot(type='relative');
```


# Comparison with CPS

Dispalcements are also calculated using [CPS](https://rbherrmann.github.io/ComputerProgramsSeismology/index.html)
and shown in @fig-cps.

[Bob Herrmann](https://www.slu.edu/science-and-engineering/academics/earth-atmospheric-sciences/faculty/herrmann-robert.php)
produced an
[excellent tutorial](https://rbherrmann.github.io/ComputerProgramsSeismology/TUTORIAL/SW4CPS/index.html)
that guided our work here.
In that tutorial, Bob found "execellent agreement" between SW4 and CPS.
<!-- Bob used a triangular pulse source-time function and convolved the recordings with a triangle of 1 s duration. -->
<!-- The Z, N and E synthetics thus created are for moment tensor elements of 1.0e+25 dyne-cm. The equivalent strengths used in the SW4 simulations are a moment of 1.0e+18 nt-m. -->

We use the script `DOIT.sh` to run the CPS codes:
```
{{< include CPS/DOIT.sh >}}
```

```{python}
#| label: fig-cps
#| fig-cap: "Calculated displacements using CPS low passed at 5 Hz plotted with [ObsPy](https://www.obspy.org)."

from obspy import UTCDateTime, Stream, read

stream = Stream()
for comp in ("MXX", "MYY", "MZZ"):
    streamcomp = read("CPS/"+comp+"_005000100_?", format="SAC")
    for tr in streamcomp:
        tr.stats.station = comp
        tr.stats.starttime = UTCDateTime()
    stream += streamcomp

stream.filter('bandpass', freqmin=0.05, freqmax=5.00)
stream.plot(type='relative');
```

We also calculated the Green's functions using the `strains` calculation from SW4.
This is obtained via reciprocity where strains at the source location are calculated due to a unit force at the surface.
Such an input file for the vertical component can be calculated using the following input file:
```
{{< include SW4/fz.sw4in >}}
```

# Conclusions

SW4 and CPS are excellent tools for wavefield calculations.